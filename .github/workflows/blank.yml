# This is a basic workflow to help you get started with Actions

name: CI

# Controls when the action will run. Triggers the workflow on push or pull request
# events but only for the main branch
on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

# A workflow run is made up of one or more jobs that can run sequentially or in parallel
jobs:
  # This workflow contains a single job called "build"
  build:
    # The type of runner that the job will run on
    runs-on: windows-latest
    # Steps represent a sequence of tasks that will be executed as part of the job
    steps:
      # Checks-out your repository under $GITHUB_WORKSPACE, so your job can access it
      - uses: actions/checkout@v2

      # Runs a single command using the runners shell
      - name: Run a one-line script
        run: echo Hello, world!
      
      - name: Run powershell script to get service catalog details
        id: main-script
        shell: powershell
        run: |
          $result = &.\serviceCatalog.ps1
          echo "::set-output name=scorecard::$result"
        env:
          SERVICE_CATALOG_TOKEN: ${{ secrets.SERVICE_CATALOG_TOKEN }}
          
      - name: Push Notification
        uses: ProtocolRedefined/Dynamic-Template-Engine@master
        with:
          repoName: gsaraldemo/Ecosystem-Template-Repository
          branchName: master
          data: '{ "message" : ${{ steps.main-script.outputs.scorecard }} }'
          templateType: HandleBars
          sourceType: CatalogScoreCard
          ClientType: Teams
          
      - name: Push Notification
        uses: ProtocolRedefined/Dynamic-Template-Engine@anuraag016/testhelpers
        with:
          repoName: gsaraldemo/Ecosystem-Template-Repository
          branchName: master
          data: '{ "message" : ${{ steps.main-script.outputs.scorecard }} }'
          templateType: HandleBars
          sourceType: CatalogScoreCard
          ClientType: Slack
          customHelpers: '{ "ifEq": "(arg1, arg2) =>(arg1 === arg2) ? \"true\" : \"\"", "truncate": "(des)=>(des.length < 25) ? des : des.substring(0,25)+ \"...\"", "appendCommaWithTwoStrings": "(firstValue,secondValue)=> `${firstValue}, ${secondValue}`", "setVar": "(varName, varValue, options)=>{options.data.root[varName] = varValue;\nreturn \"\";}"}'

